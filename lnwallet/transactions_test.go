package lnwallet

import (
	"bytes"
	"crypto/rand"
	"encoding/binary"
	"encoding/hex"
	"fmt"
	"io"
	"io/ioutil"
	"net"
	"os"
	"sort"
	"testing"
	"time"

	"github.com/decred/dcrd/blockchain/stake/v3"
	"github.com/decred/dcrd/blockchain/v3"
	"github.com/decred/dcrd/chaincfg/chainhash"
	"github.com/decred/dcrd/chaincfg/v3"
	"github.com/decred/dcrd/dcrec/secp256k1/v3"
	"github.com/decred/dcrd/dcrutil/v3"
	"github.com/decred/dcrd/txscript/v3"
	"github.com/decred/dcrd/wire"
	"github.com/decred/dcrlnd/channeldb"
	"github.com/decred/dcrlnd/input"
	"github.com/decred/dcrlnd/keychain"
	"github.com/decred/dcrlnd/lntypes"
	"github.com/decred/dcrlnd/lnwallet/chainfee"
	"github.com/decred/dcrlnd/lnwire"
	"github.com/decred/dcrlnd/shachain"
	"github.com/stretchr/testify/require"
)

/**
* This file implements that different types of transactions used in the
* lightning protocol are created correctly. To do so, the tests use the test
* vectors defined in Appendix B & C of BOLT 03.
 */

// testContext contains the test parameters defined in Appendix B & C of the
// BOLT 03 spec.
type testContext struct {
	localFundingPrivkey                *secp256k1.PrivateKey
	localPaymentBasepointSecret        *secp256k1.PrivateKey
	localDelayedPaymentBasepointSecret *secp256k1.PrivateKey
	remoteFundingPrivkey               *secp256k1.PrivateKey
	remoteRevocationBasepointSecret    *secp256k1.PrivateKey
	remotePaymentBasepointSecret       *secp256k1.PrivateKey

	localPerCommitSecret lntypes.Hash

	fundingTx *dcrutil.Tx

	localCsvDelay uint16
	fundingAmount dcrutil.Amount
	dustLimit     dcrutil.Amount
	commitHeight  uint64

	t      *testing.T
	params *chaincfg.Params
}

// newTestContext populates a new testContext struct with the constant
// parameters defined in the BOLT 03 spec.
func newTestContext(t *testing.T) (tc *testContext) {
	tc = new(testContext)

	priv := func(v string) *secp256k1.PrivateKey {
		k, err := privkeyFromHex(v)
		require.NoError(t, err)

		return k
	}

	tc.remoteFundingPrivkey = priv("1552dfba4f6cf29a62a0af13c8d6981d36d0ef8d61ba10fb0fe90da7634d7e13")
	tc.remoteRevocationBasepointSecret = priv("2222222222222222222222222222222222222222222222222222222222222222")
	tc.remotePaymentBasepointSecret = priv("4444444444444444444444444444444444444444444444444444444444444444")
	tc.localPaymentBasepointSecret = priv("1111111111111111111111111111111111111111111111111111111111111111")
	tc.localDelayedPaymentBasepointSecret = priv("3333333333333333333333333333333333333333333333333333333333333333")
	tc.localFundingPrivkey = priv("30ff4956bbdd3222d44cc5e8a1261dab1e07957bdac5ae88fe3261ef321f3749")

	var err error
	tc.localPerCommitSecret, err = lntypes.MakeHashFromStr("1f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09080706050403020100")
	require.NoError(t, err)

	const fundingTxHex = "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff00ffffffff0100a0724e18090000000017a9142451a686d349c5ce6f72373ed59a841192d794418700000000000000000100e057eb481b000000000000ffffffff0800002f646372642f"

	tc.fundingTx, err = txFromHex(fundingTxHex)
	require.NoError(t, err)

	tc.localCsvDelay = 144
	tc.fundingAmount = 10000000
	tc.dustLimit = 546

	tc.params = chaincfg.RegNetParams()
	tc.commitHeight = 42
	tc.t = t

	return tc
}

var testHtlcs = []struct {
	incoming bool
	amount   lnwire.MilliAtom
	expiry   uint32
	preimage string
}{
	{
		incoming: true,
		amount:   1000000,
		expiry:   500,
		preimage: "0000000000000000000000000000000000000000000000000000000000000000",
	},
	{
		incoming: true,
		amount:   2000000,
		expiry:   501,
		preimage: "0101010101010101010101010101010101010101010101010101010101010101",
	},
	{
		incoming: false,
		amount:   2000000,
		expiry:   502,
		preimage: "0202020202020202020202020202020202020202020202020202020202020202",
	},
	{
		incoming: false,
		amount:   3000000,
		expiry:   503,
		preimage: "0303030303030303030303030303030303030303030303030303030303030303",
	},
	{
		incoming: true,
		amount:   4000000,
		expiry:   504,
		preimage: "0404040404040404040404040404040404040404040404040404040404040404",
	},
}

// htlcDesc is a description used to construct each HTLC in each test case.
type htlcDesc struct {
	remoteSigHex    string
	resolutionTxHex string
}

type testCase struct {
	name                    string
	commitment              channeldb.ChannelCommitment
	htlcDescs               []htlcDesc
	expectedCommitmentTxHex string
	remoteSigHex            string
}

// testCases encode the raw test vectors specified in Appendix C of BOLT 03.
//
// TODO(decred) The stored hex txs need to be reviewed and documented
// somewhere.
var testCases = []testCase{
	{
		name: "simple commitment tx with no HTLCs",
		commitment: channeldb.ChannelCommitment{
			LocalBalance:  7000000000,
			RemoteBalance: 3000000000,
			FeePerKB:      15000,
		},
		htlcDescs:               nil,
		expectedCommitmentTxHex: "020000000120b2c96b4c16f15bb8757433679ff38fe628ca89654e841dce7bd84a3703866f000000000038b02b8002c0c62d000000000000001976a91476af2ec453973bb9c6c22350d46683553fe5bb4b88ac6cba6a0000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda0873e1952200000000001000000000000000000000000ffffffffda483045022100a44a24880ee16c0f20a9e13f64c38ad6ebafd16fbf44039d8e3e77b1515f9744022005ce01fe6d139a7f9270fb949c603842b52f21f692d106d1d819af74c223736701483045022100cd4cc15ab38594d340329f9bad2786ac3079ce80e7e773166d5a68fcb93e7224022067e13ce26c7448e678e9b1e72506bca6470f3b04dad4626b08c3d4515708795701475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae",
		remoteSigHex:            "3045022100cd4cc15ab38594d340329f9bad2786ac3079ce80e7e773166d5a68fcb93e7224022067e13ce26c7448e678e9b1e72506bca6470f3b04dad4626b08c3d45157087957",
	},
	{
		name: "commitment tx with seven outputs untrimmed (maximum feerate)",
		commitment: channeldb.ChannelCommitment{
			LocalBalance:  6988000000,
			RemoteBalance: 3000000000,
			FeePerKB:      1048,
		},
		htlcDescs: []htlcDesc{
			{
				remoteSigHex:    "304502210099776bbef2438506532dacee6c4b02f0473b46233ff537f680c50275123218f602207fceb44f4c10bb65c5d540728841b8d8a0c1c2e8397aeb0281ce7f34a8b6f46e",
				resolutionTxHex: "02000000018b89784a51a0e7bdb77cfb3fbc2bfa8d7f9cc10f574fc9770e9df77547e5adc1000000000000000000012202000000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda08700000000000000000100000000000000000000000000000000fd3f0148304502210099776bbef2438506532dacee6c4b02f0473b46233ff537f680c50275123218f602207fceb44f4c10bb65c5d540728841b8d8a0c1c2e8397aeb0281ce7f34a8b6f46e01473044022055ab365c1a196a77439fd31811cf7f9bea9a905010ff8415faad6a89f030576f022000f31f3f5fb76209aec070250ee4cc47fd4baf9e35d156ec6f511e4128f32dbd012000000000000000000000000000000000000000000000000000000000000000004c8b76a914f06a2ee4f3cc96a8b6963e14c601fef5ee3de3ce8763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763c0a614b8bcb07f6344b42ab04250c86a6e8b75d3fdbbc688527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f401b175ac6868",
			},
			{
				remoteSigHex:    "304402202409fb2c07b3fbca61ba44465f5ff93a96fe2366e9c4f6283871a531f840844f022018b8e53079b18ddbf77989b4e2ecd2d228811fe16334d90684144642e6ee5a6a",
				resolutionTxHex: "02000000018b89784a51a0e7bdb77cfb3fbc2bfa8d7f9cc10f574fc9770e9df77547e5adc1010000000000000000013506000000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda087f6010000000000000100000000000000000000000000000000fd1a0147304402202409fb2c07b3fbca61ba44465f5ff93a96fe2366e9c4f6283871a531f840844f022018b8e53079b18ddbf77989b4e2ecd2d228811fe16334d90684144642e6ee5a6a0148304502210092f935e65a812de8fd2e1130ebf562899759d1442b261b8e7c1b074902bc44ff0220398e762bd1862115e9f3208a282ec1d38b5e8d2c28c76dcc1ea25d8b9bb89c4101004c8676a914f06a2ee4f3cc96a8b6963e14c601fef5ee3de3ce8763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67c0a614b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868",
			},
			{
				remoteSigHex:    "3044022075d694fd350de5657e18be8c5e2b8a0e985fd8738ac147b326c08789d3b1325e022074f1a626d5c195b4138cdd16fb471ccf0443115629e52c57123edd73c76cecdb",
				resolutionTxHex: "02000000018b89784a51a0e7bdb77cfb3fbc2bfa8d7f9cc10f574fc9770e9df77547e5adc1020000000000000000010a06000000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda08700000000000000000100000000000000000000000000000000fd3f01473044022075d694fd350de5657e18be8c5e2b8a0e985fd8738ac147b326c08789d3b1325e022074f1a626d5c195b4138cdd16fb471ccf0443115629e52c57123edd73c76cecdb01483045022100d0f70acd48bf91bc014adf45fd7de83332dddcaef4bff5f6433eae511fc0994602204b3b9c64927b05ab563e9de67cd27206a609dfe25bca5ac537338a819e4caf40012001010101010101010101010101010101010101010101010101010101010101014c8b76a914f06a2ee4f3cc96a8b6963e14c601fef5ee3de3ce8763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763c0a6144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6868",
			},
			{
				remoteSigHex:    "3044022068c680ed5ad3d9adff411d04674b8052b7a77178e207ce77b7cda7fe638acf7102207e9f8001000a1b789914813e325358998f608ae7ffbe5f4e486ba47b80646c9b",
				resolutionTxHex: "02000000018b89784a51a0e7bdb77cfb3fbc2bfa8d7f9cc10f574fc9770e9df77547e5adc1030000000000000000011d0a000000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda087f7010000000000000100000000000000000000000000000000fd1a01473044022068c680ed5ad3d9adff411d04674b8052b7a77178e207ce77b7cda7fe638acf7102207e9f8001000a1b789914813e325358998f608ae7ffbe5f4e486ba47b80646c9b01483045022100d762a0377fd07866220d4e14e79ae4237353d445800a9701cf979be258f7b38c02204ac157dc0c8c0bc700808e3683e4e693c80b32ba710c53801bbe5ab3836bf64001004c8676a914f06a2ee4f3cc96a8b6963e14c601fef5ee3de3ce8763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67c0a6148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868",
			},
			{
				remoteSigHex:    "3045022100e1321109e0a47162d86d32ef4364b6435196d99004854579ee42aeffc69f8ec002204ae3290dba328957223722e6d5ff735305663177035c63686011d441618416a2",
				resolutionTxHex: "02000000018b89784a51a0e7bdb77cfb3fbc2bfa8d7f9cc10f574fc9770e9df77547e5adc104000000000000000001da0d000000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda08700000000000000000100000000000000000000000000000000fd3f01483045022100e1321109e0a47162d86d32ef4364b6435196d99004854579ee42aeffc69f8ec002204ae3290dba328957223722e6d5ff735305663177035c63686011d441618416a20147304402200a4ec5c14cc8fb84c0644948fb9554e3f922d8d85ffc6b287effcba9ce82340f022022bbcea7a15f3add46dcb8bb43a8e058f85b914a4e1016c5784b0e99dae08447012004040404040404040404040404040404040404040404040404040404040404044c8b76a914f06a2ee4f3cc96a8b6963e14c601fef5ee3de3ce8763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763c0a61418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868",
			},
		},
		expectedCommitmentTxHex: "020000000120b2c96b4c16f15bb8757433679ff38fe628ca89654e841dce7bd84a3703866f000000000038b02b8007e803000000000000000017a914004a3a30dde8a6a04d9ae5fb9d624463151aa97f87d007000000000000000017a914a891999ae4b5d4ddb759c021a8f79a13db35abec87d007000000000000000017a914f1e191e21ca4a26553da99be0217c4607f6f9b9d87b80b000000000000000017a914b25bbaf4328558929c876e244f65e34ce58a77c087a00f000000000000000017a914a0ff5936cb90da102ca1a40c59ec03e7ed0dbfc387c0c62d000000000000001976a91476af2ec453973bb9c6c22350d46683553fe5bb4b88acb19e6a0000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda0873e1952200000000001000000000000000000000000ffffffffd84830450221008c87250267ebefeb57335303809d3977694c8efc66bbc932d3a58e90182f7e750220051bd4840a27a52b3f6eddd689a0e4a225e10817f5c1fe940f36e05ba7cb654901463043021f582ff8523b5c0d4d2631e63f798d0da30d5d6ed62d9cc8f63682f32f36a5e1022033432b12e6993810518a85aceaad8a460796aeceaaab60df28bbb25dc032339301475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae",
		remoteSigHex:            "3043021f582ff8523b5c0d4d2631e63f798d0da30d5d6ed62d9cc8f63682f32f36a5e1022033432b12e6993810518a85aceaad8a460796aeceaaab60df28bbb25dc0323393",
	},
	{
		name: "commitment tx with six outputs untrimmed (minimum feerate)",
		commitment: channeldb.ChannelCommitment{
			LocalBalance:  6988000000,
			RemoteBalance: 3000000000,
			FeePerKB:      1049,
		},
		htlcDescs: []htlcDesc{
			{
				remoteSigHex:    "3045022100d448898ad1d29507e9e88cae1ae873c4b5dc42f02cb83332869d70e65ebd01d7022014c2bcb89ee6c875fd5b1ac6c6d34944ade509f8a59c28258ce54fdaefd5c354",
				resolutionTxHex: "02000000013a7768adce42e3ae26d8e20fb0d7674100a8e6209563101254813a5d35c63152000000000000000000013406000000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda087f6010000000000000100000000000000000000000000000000fd1b01483045022100d448898ad1d29507e9e88cae1ae873c4b5dc42f02cb83332869d70e65ebd01d7022014c2bcb89ee6c875fd5b1ac6c6d34944ade509f8a59c28258ce54fdaefd5c3540148304502210099582a9da920ca20c263f93c446e185aba1163798aa602ca7bb5c6acd7e1e706022011637cfa4e4936180375405eba61bc35c730c6242a73dc10432c10a598cf3ccd01004c8676a914f06a2ee4f3cc96a8b6963e14c601fef5ee3de3ce8763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67c0a614b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868",
			},
			{
				remoteSigHex:    "3045022100e600f04042c76bffb743c432ac54453150a63138688d79a65bae4ebd6883af490220560ab3fd46e7505d0655b6e1794880fc0721c2095a9f5f062347b4eff4203098",
				resolutionTxHex: "02000000013a7768adce42e3ae26d8e20fb0d7674100a8e6209563101254813a5d35c63152010000000000000000010906000000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda08700000000000000000100000000000000000000000000000000fd3f01483045022100e600f04042c76bffb743c432ac54453150a63138688d79a65bae4ebd6883af490220560ab3fd46e7505d0655b6e1794880fc0721c2095a9f5f062347b4eff420309801473044022070e5ed6895317c8074d5284d10520feb0f8513a881ac8e847ba9dadbbc69e11002207c3989658af03fe9d96e2a8f0a5202fae3e242f7d2c29deb9b502f69e7a22408012001010101010101010101010101010101010101010101010101010101010101014c8b76a914f06a2ee4f3cc96a8b6963e14c601fef5ee3de3ce8763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763c0a6144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6868",
			},
			{
				remoteSigHex:    "30440220694b21dbe38aba8df7018a9cb32c6a148e044639a835a545cfa07e661d2edd7502204599cd4cac9a8f98f821d7cbfaf611201368b0353f069be72818286e2b3d2b6d",
				resolutionTxHex: "02000000013a7768adce42e3ae26d8e20fb0d7674100a8e6209563101254813a5d35c63152020000000000000000011c0a000000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda087f7010000000000000100000000000000000000000000000000fd19014730440220694b21dbe38aba8df7018a9cb32c6a148e044639a835a545cfa07e661d2edd7502204599cd4cac9a8f98f821d7cbfaf611201368b0353f069be72818286e2b3d2b6d0147304402205a588a08eca407a1e8de50b2bc0a0cf5ea73227e7078a2a01831c4d6814d1d7502205b4c9adfe53d57a71782fc2cccbc9b1f8dda838373ba604b234b2e33248ea57a01004c8676a914f06a2ee4f3cc96a8b6963e14c601fef5ee3de3ce8763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67c0a6148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868",
			},
			{
				remoteSigHex:    "304402206ca5e69c064fab991ee5e42cc0dfdfcbd31d390413e38e1e78cae261dbfe7ffd02202b841cbcbc3711c50943d5145c2442d61a1fa2d5366b1eae0e503481a0ba276e",
				resolutionTxHex: "02000000013a7768adce42e3ae26d8e20fb0d7674100a8e6209563101254813a5d35c6315203000000000000000001d90d000000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda08700000000000000000100000000000000000000000000000000fd3e0147304402206ca5e69c064fab991ee5e42cc0dfdfcbd31d390413e38e1e78cae261dbfe7ffd02202b841cbcbc3711c50943d5145c2442d61a1fa2d5366b1eae0e503481a0ba276e01473044022040eda2c84f5e93b357d59b8b85d2b80f8f7a857ac704e3860b698bcdd0b77a02022076051d41b67ca68d057df1b4e574b3b3467414bc218717363de6d0911d45b18b012004040404040404040404040404040404040404040404040404040404040404044c8b76a914f06a2ee4f3cc96a8b6963e14c601fef5ee3de3ce8763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763c0a61418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868",
			},
		},
		expectedCommitmentTxHex: "020000000120b2c96b4c16f15bb8757433679ff38fe628ca89654e841dce7bd84a3703866f000000000038b02b8006d007000000000000000017a914a891999ae4b5d4ddb759c021a8f79a13db35abec87d007000000000000000017a914f1e191e21ca4a26553da99be0217c4607f6f9b9d87b80b000000000000000017a914b25bbaf4328558929c876e244f65e34ce58a77c087a00f000000000000000017a914a0ff5936cb90da102ca1a40c59ec03e7ed0dbfc387c0c62d000000000000001976a91476af2ec453973bb9c6c22350d46683553fe5bb4b88acd49e6a0000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda0873e1952200000000001000000000000000000000000ffffffffd847304402204aa0bdeaf8c9392f1703a36862f85c807157aaab860f11abf14fab16fa01530a02200a29cfa09533c1071594cc6d50a065bf734833c53ac6745fde0b1acced1df3640147304402207005529ee9be80ea66e8902b481b45c0988d4bf8787d4c948d6dc6fbe16920c3022051ce3e7898a6dcc659eb215d32dabe6384dfb4237eb9a8ad972ccc7a5d9e6f1401475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae",
		remoteSigHex:            "304402207005529ee9be80ea66e8902b481b45c0988d4bf8787d4c948d6dc6fbe16920c3022051ce3e7898a6dcc659eb215d32dabe6384dfb4237eb9a8ad972ccc7a5d9e6f14",
	},
	{
		name: "commitment tx with six outputs untrimmed (maximum feerate)",
		commitment: channeldb.ChannelCommitment{
			LocalBalance:  6988000000,
			RemoteBalance: 3000000000,
			FeePerKB:      3352,
		},
		htlcDescs: []htlcDesc{
			{
				remoteSigHex:    "3045022100a69aa8dc40d6c6e9b52a2beace04f28bd05268fec4d62b92f798843a584de1120220494cb2fd9ce492577153612a1e389d1af54fad5126518661ddb1d3ef21ade1c8",
				resolutionTxHex: "02000000012d0adf2f2dec43437b2f938d501be962960fbee8d5955320ad4fe80f2b31aa0c00000000000000000001ab02000000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda087f6010000000000000100000000000000000000000000000000fd1b01483045022100a69aa8dc40d6c6e9b52a2beace04f28bd05268fec4d62b92f798843a584de1120220494cb2fd9ce492577153612a1e389d1af54fad5126518661ddb1d3ef21ade1c8014830450221009362d8931fb0f32f05e9e5fce552613592160ebe73846e7a60c9118262b1fd5a02207a4a0e8fe7ce5b0f636e7d596b173ca2a3e6f58a27d5d22c40f56f5e4406dc5d01004c8676a914f06a2ee4f3cc96a8b6963e14c601fef5ee3de3ce8763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67c0a614b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868",
			},
			{
				remoteSigHex:    "30440220379ca1dd09143603198df1b02652d1dd533951514886f4a2e3165e1eeb505870022054132125dae4bf03ceecb6094ce2309442337738a2058c661f38481fcb83f8e9",
				resolutionTxHex: "02000000012d0adf2f2dec43437b2f938d501be962960fbee8d5955320ad4fe80f2b31aa0c010000000000000000012202000000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda08700000000000000000100000000000000000000000000000000fd3f014730440220379ca1dd09143603198df1b02652d1dd533951514886f4a2e3165e1eeb505870022054132125dae4bf03ceecb6094ce2309442337738a2058c661f38481fcb83f8e901483045022100b5d6ba4411688fefcaccbe2393d072cce786dd270c6666cfebe946163179349a02202c97bfb7d50b9a364d01eec08f464eada39b19e0564783e1e3a8eced4a9aba9d012001010101010101010101010101010101010101010101010101010101010101014c8b76a914f06a2ee4f3cc96a8b6963e14c601fef5ee3de3ce8763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763c0a6144b6b2e5444c2639cc0fb7bcea5afba3f3cdce23988527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f501b175ac6868",
			},
			{
				remoteSigHex:    "304402201fa70c4f003b88c1b1fc01e637981fbe76556f8f2d694beda3688e730cdcaa59022023bd609d2ee9b14b8b069774be9aa9ad513c5140a2fb675bb4dba5f12f130ca6",
				resolutionTxHex: "02000000012d0adf2f2dec43437b2f938d501be962960fbee8d5955320ad4fe80f2b31aa0c020000000000000000019306000000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda087f7010000000000000100000000000000000000000000000000fd1a0147304402201fa70c4f003b88c1b1fc01e637981fbe76556f8f2d694beda3688e730cdcaa59022023bd609d2ee9b14b8b069774be9aa9ad513c5140a2fb675bb4dba5f12f130ca601483045022100ecbe73f23112647fcaa525a1c8b5d85a634741cded70f472509f27ecd36604b6022006c4280ab8257972542c23059e3fae36f12f3789e4576d9daa0b2e72fb8975a501004c8676a914f06a2ee4f3cc96a8b6963e14c601fef5ee3de3ce8763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67c0a6148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868",
			},
			{
				remoteSigHex:    "3045022100cf17de90db274f4c51bcc29c08ebc1c514e74601b812b5ce1b699efa3e5658e5022043a4ae47f6881e2ea18c8623fd8f722ff4313e9edf43e02892e6d79ac9dbbf76",
				resolutionTxHex: "02000000012d0adf2f2dec43437b2f938d501be962960fbee8d5955320ad4fe80f2b31aa0c03000000000000000001f209000000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda08700000000000000000100000000000000000000000000000000fd3f01483045022100cf17de90db274f4c51bcc29c08ebc1c514e74601b812b5ce1b699efa3e5658e5022043a4ae47f6881e2ea18c8623fd8f722ff4313e9edf43e02892e6d79ac9dbbf760147304402203ac4c487080c38df3bc87e0a638529313280c77e13c7bf497c5041adea837ccf02203e7a63f7e5fdb1cefafadab9a842646865922943aa1d06fb92b066c9506523ce012004040404040404040404040404040404040404040404040404040404040404044c8b76a914f06a2ee4f3cc96a8b6963e14c601fef5ee3de3ce8763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763c0a61418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868",
			},
		},
		expectedCommitmentTxHex: "020000000120b2c96b4c16f15bb8757433679ff38fe628ca89654e841dce7bd84a3703866f000000000038b02b8006d007000000000000000017a914a891999ae4b5d4ddb759c021a8f79a13db35abec87d007000000000000000017a914f1e191e21ca4a26553da99be0217c4607f6f9b9d87b80b000000000000000017a914b25bbaf4328558929c876e244f65e34ce58a77c087a00f000000000000000017a914a0ff5936cb90da102ca1a40c59ec03e7ed0dbfc387c0c62d000000000000001976a91476af2ec453973bb9c6c22350d46683553fe5bb4b88ac549a6a0000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda0873e1952200000000001000000000000000000000000ffffffffd8473044022011a5c4ead2ea08ee871f03ad216dc76df325f96a3e49af4906aae4698c387a5602202feb227e8a16656a735080cb1c40d638752030653a4f3f15c7252680aeebca9d014730440220140085712a45051ad469b4670ff333f1a19e19a037b65eaeb0bbe7861f41a4be022030640b824744d4223862ce50fd80f0d4f5de4e8ba4b27101251580868349663d01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae",
		remoteSigHex:            "30440220140085712a45051ad469b4670ff333f1a19e19a037b65eaeb0bbe7861f41a4be022030640b824744d4223862ce50fd80f0d4f5de4e8ba4b27101251580868349663d",
	},
	{
		name: "commitment tx with five outputs untrimmed (minimum feerate)",
		commitment: channeldb.ChannelCommitment{
			LocalBalance:  6988000000,
			RemoteBalance: 3000000000,
			FeePerKB:      3353,
		},
		htlcDescs: []htlcDesc{
			{
				remoteSigHex:    "30440220375ce648c20d611093a411ea326d81b3048701320be17c8e28dddd8deae9e7790220266ab10c533826886504e6c2039e4c1fac2c28917a21f3196b743039b4278efd",
				resolutionTxHex: "020000000174dc9bfabfd1d2ae3018e63d20b657f3cf4722b1c8954396af79516f0bb31e6f00000000000000000001ab02000000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda087f6010000000000000100000000000000000000000000000000fd19014730440220375ce648c20d611093a411ea326d81b3048701320be17c8e28dddd8deae9e7790220266ab10c533826886504e6c2039e4c1fac2c28917a21f3196b743039b4278efd01473044022028116171e25af16cd3e76c578708e93199ae7aef7ab4b6b53f150f9f3ff95092022024e781b70980401d8d421fab18fe2633b318a65c4435c0c0c9546a6994d0806501004c8676a914f06a2ee4f3cc96a8b6963e14c601fef5ee3de3ce8763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67c0a614b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868",
			},
			{
				remoteSigHex:    "30440220578e2bf3c78d5e4d8836fc965e7559595cf3f02b844720e44d5870cdc869a062022016a530f582b92eb11769c7729f2d424403336f4eef636f238196c205ec713240",
				resolutionTxHex: "020000000174dc9bfabfd1d2ae3018e63d20b657f3cf4722b1c8954396af79516f0bb31e6f010000000000000000019306000000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda087f7010000000000000100000000000000000000000000000000fd19014730440220578e2bf3c78d5e4d8836fc965e7559595cf3f02b844720e44d5870cdc869a062022016a530f582b92eb11769c7729f2d424403336f4eef636f238196c205ec71324001473044022067feaf8d88f0bb921b7b00edb536cefc33087d649003e44cd9e4c16f63e8e6180220313be097210430b130e4080e92e5fc163d7395b93af559b5fe023c35082a80ca01004c8676a914f06a2ee4f3cc96a8b6963e14c601fef5ee3de3ce8763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67c0a6148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868",
			},
			{
				remoteSigHex:    "3045022100cd1d570b1be33bc2f69433a8fe0305ab5fe9fc230b0b294ebedef70f1a11743402204a8c5c01259f2b6aff18d8dc0447112955e87ba162f007d174a6f350f56ce610",
				resolutionTxHex: "020000000174dc9bfabfd1d2ae3018e63d20b657f3cf4722b1c8954396af79516f0bb31e6f02000000000000000001f109000000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda08700000000000000000100000000000000000000000000000000fd3f01483045022100cd1d570b1be33bc2f69433a8fe0305ab5fe9fc230b0b294ebedef70f1a11743402204a8c5c01259f2b6aff18d8dc0447112955e87ba162f007d174a6f350f56ce61001473044022015738e6cd18dd76ce2cc3e8e74beefee4c0a38a2f5782e2ddf050581c57640fb02202e0dc962ff3c7c923f2bd2ddc8576b3e49e7208ca6a8dbcedafc15ef7fd0c5c2012004040404040404040404040404040404040404040404040404040404040404044c8b76a914f06a2ee4f3cc96a8b6963e14c601fef5ee3de3ce8763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763c0a61418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868",
			},
		},
		expectedCommitmentTxHex: "020000000120b2c96b4c16f15bb8757433679ff38fe628ca89654e841dce7bd84a3703866f000000000038b02b8005d007000000000000000017a914a891999ae4b5d4ddb759c021a8f79a13db35abec87b80b000000000000000017a914b25bbaf4328558929c876e244f65e34ce58a77c087a00f000000000000000017a914a0ff5936cb90da102ca1a40c59ec03e7ed0dbfc387c0c62d000000000000001976a91476af2ec453973bb9c6c22350d46683553fe5bb4b88acc69a6a0000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda0873e1952200000000001000000000000000000000000ffffffffd94730440220773d52630dcca9faeed17ffd4e8112f532519f3b158f10c41feee89afeb732cd02202bf194d3240f60632d753125317b16203ebc0cbfa6bfe13c53c789a5ba3ca7fd01483045022100d34bff451f9db985f6fce2557a1bb313093c2ab0756a6d466c7990d7587f9a6f0220447e5d94086ae666eea500dd50ee3ba380230d7aa51f0a9bcc98f404468a06c601475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae",
		remoteSigHex:            "3045022100d34bff451f9db985f6fce2557a1bb313093c2ab0756a6d466c7990d7587f9a6f0220447e5d94086ae666eea500dd50ee3ba380230d7aa51f0a9bcc98f404468a06c6",
	},
	{
		name: "commitment tx with five outputs untrimmed (maximum feerate)",
		commitment: channeldb.ChannelCommitment{
			LocalBalance:  6988000000,
			RemoteBalance: 3000000000,
			FeePerKB:      3702,
		},
		htlcDescs: []htlcDesc{
			{
				remoteSigHex:    "3045022100fe8b6cd22eee614520750c65e73f7ca35d154ff3cb569b7a472cff0ec7d7bf3a02207ea6085ea0a31e93029720f97829fc625bee4e5bfb42bd2ca2db6d783c5473f7",
				resolutionTxHex: "0200000001962a4fb9939d9eb67503d7c5a10b39159264e1fdaeaa6eafaf2d25293d8541ed000000000000000000012202000000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda087f6010000000000000100000000000000000000000000000000fd1a01483045022100fe8b6cd22eee614520750c65e73f7ca35d154ff3cb569b7a472cff0ec7d7bf3a02207ea6085ea0a31e93029720f97829fc625bee4e5bfb42bd2ca2db6d783c5473f701473044022068ad3b6cdf2e81249a647e535f8ec656d8c57d1da6df1384af8aa9fb6801d21f022061e8f305c2ebd826b178de739963274e63fba4e3a14fe8259fd2cee5df40708501004c8676a914f06a2ee4f3cc96a8b6963e14c601fef5ee3de3ce8763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67c0a614b43e1b38138a41b37f7cd9a1d274bc63e3a9b5d188ac6868",
			},
			{
				remoteSigHex:    "304402206cd69692f491a4c3de64ae46cc644b139eaef742a15ee784bb4461ebae4905d902204fd53c3a8d0a7b3bbdc738d5ea69654ca1090c2ea4d06c09eebcece50f080774",
				resolutionTxHex: "0200000001962a4fb9939d9eb67503d7c5a10b39159264e1fdaeaa6eafaf2d25293d8541ed010000000000000000010a06000000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda087f7010000000000000100000000000000000000000000000000fd1a0147304402206cd69692f491a4c3de64ae46cc644b139eaef742a15ee784bb4461ebae4905d902204fd53c3a8d0a7b3bbdc738d5ea69654ca1090c2ea4d06c09eebcece50f08077401483045022100dac0181a90eb84dfa4c8635392a6f09e811945ef468f1441018bd1c6c227a30f02203cc57b7e488385a348e4db67b1a65e35f07040265b186d0348847f70d81a485801004c8676a914f06a2ee4f3cc96a8b6963e14c601fef5ee3de3ce8763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67c0a6148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868",
			},
			{
				remoteSigHex:    "3045022100b17d31dbe2c2716f864ca5d3cbbddd3c68c6d36d3ab9f45a78d8954a5d761b8702201870f983e18055ba306c91a60e60b824de0d839dd95c8b69ee2a35a8d60b70ef",
				resolutionTxHex: "0200000001962a4fb9939d9eb67503d7c5a10b39159264e1fdaeaa6eafaf2d25293d8541ed020000000000000000015a09000000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda08700000000000000000100000000000000000000000000000000fd3f01483045022100b17d31dbe2c2716f864ca5d3cbbddd3c68c6d36d3ab9f45a78d8954a5d761b8702201870f983e18055ba306c91a60e60b824de0d839dd95c8b69ee2a35a8d60b70ef0147304402200a4dd859fddf41578822180879c43ac4ff69a440caf1a8f8375377036f7751a2022064eafd53a7f620214d08d4808b2b4af528ca5d4b7b45a7391df58e99b9926e5a012004040404040404040404040404040404040404040404040404040404040404044c8b76a914f06a2ee4f3cc96a8b6963e14c601fef5ee3de3ce8763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763c0a61418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868",
			},
		},
		expectedCommitmentTxHex: "020000000120b2c96b4c16f15bb8757433679ff38fe628ca89654e841dce7bd84a3703866f000000000038b02b8005d007000000000000000017a914a891999ae4b5d4ddb759c021a8f79a13db35abec87b80b000000000000000017a914b25bbaf4328558929c876e244f65e34ce58a77c087a00f000000000000000017a914a0ff5936cb90da102ca1a40c59ec03e7ed0dbfc387c0c62d000000000000001976a91476af2ec453973bb9c6c22350d46683553fe5bb4b88ac239a6a0000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda0873e1952200000000001000000000000000000000000ffffffffd9483045022100e71024fac5bc27322c5859e120fd25630a1f576223ddee86c8b341b5e89d988b02200581186dbe804318d073f332dff32c82b894d341910d78f8612ab45039e95dd20147304402206d7de900c27ebd30502b700e5a440f687db32ca5b66842032dd3f591387f598e02203c42a4202d377a0f77035759d7eae5dc20392ad09f05d720705d844a665d08d701475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae",
		remoteSigHex:            "304402206d7de900c27ebd30502b700e5a440f687db32ca5b66842032dd3f591387f598e02203c42a4202d377a0f77035759d7eae5dc20392ad09f05d720705d844a665d08d7",
	},
	{
		name: "commitment tx with four outputs untrimmed (minimum feerate)",
		commitment: channeldb.ChannelCommitment{
			LocalBalance:  6988000000,
			RemoteBalance: 3000000000,
			FeePerKB:      3703,
		},
		htlcDescs: []htlcDesc{
			{
				remoteSigHex:    "3045022100ee03a0f7a2dfae976ce071d27ed49086168578938464e9fb1f541b995757a8ba02204c7e5f0da6953c32a29c25473c3579139a4625c4d56d03b5e2222cad8a175d47",
				resolutionTxHex: "0200000001416723d17021e0412c123d05edd6879705c7384da76dec6390fb41062eaebb34000000000000000000010906000000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda087f7010000000000000100000000000000000000000000000000fd1b01483045022100ee03a0f7a2dfae976ce071d27ed49086168578938464e9fb1f541b995757a8ba02204c7e5f0da6953c32a29c25473c3579139a4625c4d56d03b5e2222cad8a175d4701483045022100bff55381f60024403f051cc03c49ae9973f82176e7d1f8247326741b99ed9275022043daa2db6fe6733d719dd060864d0fa7b392ac469459add4c6e10fbbdf061f1801004c8676a914f06a2ee4f3cc96a8b6963e14c601fef5ee3de3ce8763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67c0a6148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868",
			},
			{
				remoteSigHex:    "304402204cbc16375a92e7441b36e7d00f24b15415dc2a282e4f5453d42bfb4f390d2bee0220369f5de506a41400777735c007e22292bcdb74e642eff0d8337097dc759da734",
				resolutionTxHex: "0200000001416723d17021e0412c123d05edd6879705c7384da76dec6390fb41062eaebb34010000000000000000015909000000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda08700000000000000000100000000000000000000000000000000fd3e0147304402204cbc16375a92e7441b36e7d00f24b15415dc2a282e4f5453d42bfb4f390d2bee0220369f5de506a41400777735c007e22292bcdb74e642eff0d8337097dc759da73401473044022073ffa9cbbb1991e37745f9f6ff01b5181defde6915015e4f249427e0c087cdd002201dfbdc718c0a7a3f60a11b37772b28ca72172c0d25e05bbe276f771b7909f297012004040404040404040404040404040404040404040404040404040404040404044c8b76a914f06a2ee4f3cc96a8b6963e14c601fef5ee3de3ce8763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763c0a61418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868",
			},
		},
		expectedCommitmentTxHex: "020000000120b2c96b4c16f15bb8757433679ff38fe628ca89654e841dce7bd84a3703866f000000000038b02b8004b80b000000000000000017a914b25bbaf4328558929c876e244f65e34ce58a77c087a00f000000000000000017a914a0ff5936cb90da102ca1a40c59ec03e7ed0dbfc387c0c62d000000000000001976a91476af2ec453973bb9c6c22350d46683553fe5bb4b88aca19a6a0000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda0873e1952200000000001000000000000000000000000ffffffffd8473044022079847d0041f9fd236f89aac30cc1b8a0107adcf074646f166345c7f4bacdddcb02202766b94ecbd0ab36d5021d207cdfe3f572247fecbe6913493898fd441f6584f201473044022048f0ec18b5f7260b7c987d27e9ea0106aac1bc4ee205a5a49063ed236466ac2702202c9ba48ad0447dfe7df7e474ea201a0e274af9983b48fd4a90a33f5137aae0ec01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae",
		remoteSigHex:            "3044022048f0ec18b5f7260b7c987d27e9ea0106aac1bc4ee205a5a49063ed236466ac2702202c9ba48ad0447dfe7df7e474ea201a0e274af9983b48fd4a90a33f5137aae0ec",
	},
	{
		name: "commitment tx with four outputs untrimmed (maximum feerate)",
		commitment: channeldb.ChannelCommitment{
			LocalBalance:  6988000000,
			RemoteBalance: 3000000000,
			FeePerKB:      6246,
		},
		htlcDescs: []htlcDesc{
			{
				remoteSigHex:    "3045022100973b37159f48a9a5272a43ad3c10aeef3f2c7adf452277efb341a3c546283753022023d88a1b4c97a53437a6ee5d53dba3565df1753fc58cd8c5a45dfcb2248c736a",
				resolutionTxHex: "020000000118acc073b9536b1c08c081763c4cbfdab6715ec42d9dace6aaa1b0506c8b3f8c000000000000000000012202000000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda087f7010000000000000100000000000000000000000000000000fd1a01483045022100973b37159f48a9a5272a43ad3c10aeef3f2c7adf452277efb341a3c546283753022023d88a1b4c97a53437a6ee5d53dba3565df1753fc58cd8c5a45dfcb2248c736a0147304402206f44fa17f0b77c37798b6c9ea8b2d580dcf56884f66c64b10ace73920744b1ef02202481967de9fb240c76440b6c054a977ea810f4e335471f9d615aa379c46c7ab701004c8676a914f06a2ee4f3cc96a8b6963e14c601fef5ee3de3ce8763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c820120876475527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae67c0a6148a486ff2e31d6158bf39e2608864d63fefd09d5b88ac6868",
			},
			{
				remoteSigHex:    "304402200ec304190c1f5e816d0c031db6857c1f6e5817efc83f77e2068a8ce9dec99ce002204cb5b16ef327e5097d2b453bde5c5f8412ed824c2c0bf2eb73c005455ae95fa8",
				resolutionTxHex: "020000000118acc073b9536b1c08c081763c4cbfdab6715ec42d9dace6aaa1b0506c8b3f8c010000000000000000010a05000000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda08700000000000000000100000000000000000000000000000000fd3f0147304402200ec304190c1f5e816d0c031db6857c1f6e5817efc83f77e2068a8ce9dec99ce002204cb5b16ef327e5097d2b453bde5c5f8412ed824c2c0bf2eb73c005455ae95fa8014830450221008af0ae2463b7becfdd3eca6aa6723e0c5a1ab6b82e4f2acf0cf044452795e05902207479106c7030c93853613bf3c6db21d78332870fa033f7eb4369b087f0b1b3f7012004040404040404040404040404040404040404040404040404040404040404044c8b76a914f06a2ee4f3cc96a8b6963e14c601fef5ee3de3ce8763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763c0a61418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868",
			},
		},
		expectedCommitmentTxHex: "020000000120b2c96b4c16f15bb8757433679ff38fe628ca89654e841dce7bd84a3703866f000000000038b02b8004b80b000000000000000017a914b25bbaf4328558929c876e244f65e34ce58a77c087a00f000000000000000017a914a0ff5936cb90da102ca1a40c59ec03e7ed0dbfc387c0c62d000000000000001976a91476af2ec453973bb9c6c22350d46683553fe5bb4b88ac56966a0000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda0873e1952200000000001000000000000000000000000ffffffffda48304502210094bd8d96b28557deecfde5a98279c1daf1bc48a9a4a95ad73245d723dbc0d0b0022009a4d7a8c848783a6025e29c6a48185f48fe334c1399430f920c4ff638ba473601483045022100a9bc18349a0da7dc62a0bb3cae634868e5db0432ca761f13be6c39f52f40d56b02204ca96149c04fa371c5aca7ceefb091d99ab1c649c57661609709b9ce3e2bb61e01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae",
		remoteSigHex:            "3045022100a9bc18349a0da7dc62a0bb3cae634868e5db0432ca761f13be6c39f52f40d56b02204ca96149c04fa371c5aca7ceefb091d99ab1c649c57661609709b9ce3e2bb61e",
	},
	{
		name: "commitment tx with three outputs untrimmed (minimum feerate)",
		commitment: channeldb.ChannelCommitment{
			LocalBalance:  6988000000,
			RemoteBalance: 3000000000,
			FeePerKB:      6247,
		},
		htlcDescs: []htlcDesc{
			{
				remoteSigHex:    "304402205b3abf281a0cd4b60f63cfc7df9843c94033c9fa02960eaa7e82ff890210b45602207c465b8ee8cb445a3d0d12df2ed946641a9d051457d9ce2f1ec0d6b06e40d898",
				resolutionTxHex: "020000000186636b6bce99fce5f3f15e55b1329566c0fe149ee8424dba9a201e1a7c1f23f3000000000000000000010905000000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda08700000000000000000100000000000000000000000000000000fd3e0147304402205b3abf281a0cd4b60f63cfc7df9843c94033c9fa02960eaa7e82ff890210b45602207c465b8ee8cb445a3d0d12df2ed946641a9d051457d9ce2f1ec0d6b06e40d898014730440220028b4952dddb8c7b8664ad2b4eb0423e19c62b928f14a689a7ac793f7443dfda022069550b0ab6ee03f7ab53cea8aa0c428e56727bbb092380b22dffcc19f171153d012004040404040404040404040404040404040404040404040404040404040404044c8b76a914f06a2ee4f3cc96a8b6963e14c601fef5ee3de3ce8763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763c0a61418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868",
			},
		},
		expectedCommitmentTxHex: "020000000120b2c96b4c16f15bb8757433679ff38fe628ca89654e841dce7bd84a3703866f000000000038b02b8003a00f000000000000000017a914a0ff5936cb90da102ca1a40c59ec03e7ed0dbfc387c0c62d000000000000001976a91476af2ec453973bb9c6c22350d46683553fe5bb4b88ac2a976a0000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda0873e1952200000000001000000000000000000000000ffffffffd94830450221008be625b9478404cf9520c5fbb5f029ff8d0f88614900277919a68bf174576c670220375ad7524ac588f24b119aec6098a3edbf02ba0ccad8d0566fe861c5df621d320147304402204a3e2536b57d34d84775e9c97242d8ec9343be325d2f6ebc524d091929ed80db022067e47bdc02cd1d8704209a128f6c5e30efc9c6cf43cc2a29f9a05dcc512b7c1b01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae",
		remoteSigHex:            "304402204a3e2536b57d34d84775e9c97242d8ec9343be325d2f6ebc524d091929ed80db022067e47bdc02cd1d8704209a128f6c5e30efc9c6cf43cc2a29f9a05dcc512b7c1b",
	},
	{
		name: "commitment tx with three outputs untrimmed (maximum feerate)",
		commitment: channeldb.ChannelCommitment{
			LocalBalance:  6988000000,
			RemoteBalance: 3000000000,
			FeePerKB:      7960,
		},
		htlcDescs: []htlcDesc{
			{
				remoteSigHex:    "30440220069b12e7eefba4bc6804e0ea05608ecd7493c16723280af29ce0ea54575d6eca0220727a46bb594b0c15901a63583fb8ea43a062d835237186cf83e01f4473c05885",
				resolutionTxHex: "0200000001bc0651ce0acff9071ee3b8baacd569a91d3c836861416ec39e65ce153bbbf743000000000000000000012202000000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda08700000000000000000100000000000000000000000000000000fd3f014730440220069b12e7eefba4bc6804e0ea05608ecd7493c16723280af29ce0ea54575d6eca0220727a46bb594b0c15901a63583fb8ea43a062d835237186cf83e01f4473c0588501483045022100cc872a7a698776f6f37b7476d79508f73f597f08aa601e0c7eb8d7d799cda48702203b10795ef35d36e9ca71cfa9e8ccb6c10d63be2b2a037eb1fa312fa0c66e6c82012004040404040404040404040404040404040404040404040404040404040404044c8b76a914f06a2ee4f3cc96a8b6963e14c601fef5ee3de3ce8763ac67210394854aa6eab5b2a8122cc726e9dded053a2184d88256816826d6231c068d4a5b7c8201208763c0a61418bc1a114ccf9c052d3d23e28d3b0a9d1227434288527c21030d417a46946384f88d5f3337267c5e579765875dc4daca813e21734b140639e752ae677502f801b175ac6868",
			},
		},
		expectedCommitmentTxHex: "020000000120b2c96b4c16f15bb8757433679ff38fe628ca89654e841dce7bd84a3703866f000000000038b02b8003a00f000000000000000017a914a0ff5936cb90da102ca1a40c59ec03e7ed0dbfc387c0c62d000000000000001976a91476af2ec453973bb9c6c22350d46683553fe5bb4b88ac80946a0000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda0873e1952200000000001000000000000000000000000ffffffffd948304502210094df2fb318c0e43b0178eebde0cdd2dfce89e3d4d3647d333a5504defed84a2a022041427caee2c7915ce8076e0ff81720462980002a411ae489a56f814f028aaa560147304402206d2b62fdbd3f240a8302e1f460d21f4222a6edc5f09160be3cb662324e95439e02203aac2486606b9a4a4c5934233a55571336ac3f120e27e3d62cbdea35fb94675901475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae",
		remoteSigHex:            "304402206d2b62fdbd3f240a8302e1f460d21f4222a6edc5f09160be3cb662324e95439e02203aac2486606b9a4a4c5934233a55571336ac3f120e27e3d62cbdea35fb946759",
	},
	{
		name: "commitment tx with two outputs untrimmed (minimum feerate)",
		commitment: channeldb.ChannelCommitment{
			LocalBalance:  6988000000,
			RemoteBalance: 3000000000,
			FeePerKB:      7961,
		},
		htlcDescs:               []htlcDesc{},
		expectedCommitmentTxHex: "020000000120b2c96b4c16f15bb8757433679ff38fe628ca89654e841dce7bd84a3703866f000000000038b02b8002c0c62d000000000000001976a91476af2ec453973bb9c6c22350d46683553fe5bb4b88ac8f956a0000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda0873e1952200000000001000000000000000000000000ffffffffd9483045022100eb0d22b6f16b4af2f0e1fa7bc658d8913adac9c275fe13c46809807a2bf9ea8302204003166abdd234e7978f06ea61643e2c3673e8c186ccecb133627fe0aec3e70701473044022018f49dd6b24b05356e51bf629e241fcaaff887c7ea5baeb76fa1f6c79f1319e102203c8443068f8d1cdda7e722a49100c39358e9c21a79fd8e0c771d38c73b38f6c901475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae",
		remoteSigHex:            "3044022018f49dd6b24b05356e51bf629e241fcaaff887c7ea5baeb76fa1f6c79f1319e102203c8443068f8d1cdda7e722a49100c39358e9c21a79fd8e0c771d38c73b38f6c9",
	},
	{
		name: "commitment tx with two outputs untrimmed (maximum feerate)",
		commitment: channeldb.ChannelCommitment{
			LocalBalance:  6988000000,
			RemoteBalance: 3000000000,
			FeePerKB:      19196304,
		},
		htlcDescs:               []htlcDesc{},
		expectedCommitmentTxHex: "020000000120b2c96b4c16f15bb8757433679ff38fe628ca89654e841dce7bd84a3703866f000000000038b02b80022202000000000000000017a91496fbabc4e9b687c24342b316586fc2cc8f70dda087c0c62d000000000000001976a91476af2ec453973bb9c6c22350d46683553fe5bb4b88ac3e1952200000000001000000000000000000000000ffffffffd847304402200afb8cd88abd85d8ef400af883cd04c3acef8cc0108f663bac671d9dcec4c51d02202a567a9c8d8d500d65ae93a9161011bed04940fe626ae2a781d6b90812bb079c0147304402202e19d3bba5d65e113c10b10f85e1c4e0a13d3557c50fa13818e18a0bfafb910302203328d0182af1822543832b82e319c1a01697b81210c94374f279f35a39e4590c01475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae",
		remoteSigHex:            "304402202e19d3bba5d65e113c10b10f85e1c4e0a13d3557c50fa13818e18a0bfafb910302203328d0182af1822543832b82e319c1a01697b81210c94374f279f35a39e4590c",
	},
	{
		name: "commitment tx with one output untrimmed (minimum feerate)",
		commitment: channeldb.ChannelCommitment{
			LocalBalance:  6988000000,
			RemoteBalance: 3000000000,
			FeePerKB:      19196305,
		},
		htlcDescs:               []htlcDesc{},
		expectedCommitmentTxHex: "020000000120b2c96b4c16f15bb8757433679ff38fe628ca89654e841dce7bd84a3703866f000000000038b02b8001c0c62d000000000000001976a91476af2ec453973bb9c6c22350d46683553fe5bb4b88ac3e1952200000000001000000000000000000000000ffffffffda483045022100bf712763e8fbed086b5e1cbb479e3fe8cd706a3633c5183cb8d0798843613aad02200b741e741a519d28b654bfeca369cc774b44ac53ac1e9a0aa81047e683c99f68014830450221009115f844a43d82e618d2984cd3409f9f33cd8122f354397d03a948078be904dd02203515791fed4a1b981c39c766401ef794488904aa6b2077d9946a2742d970dd0501475221023da092f6980e58d2c037173180e9a465476026ee50f96695963e8efe436f54eb21030e9f7b623d2ccc7c9bd44d66d5ce21ce504c0acf6385a132cec6d3c39fa711c152ae",
		remoteSigHex:            "30450221009115f844a43d82e618d2984cd3409f9f33cd8122f354397d03a948078be904dd02203515791fed4a1b981c39c766401ef794488904aa6b2077d9946a2742d970dd05",
	},
}

// TestCommitmentAndHTLCTransactions checks the test vectors specified in
// BOLT 03, Appendix C. This deterministically generates commitment and second
// level HTLC transactions and checks that they match the expected values.
func TestCommitmentAndHTLCTransactions(t *testing.T) {
	// These tests are based on the original Bitcoin LN ones and thus use
	// fees lower than the current fee floor. Thus we disable checking the
	// fee floor for these tests.
	disableFeeFloorCheck = true
	defer func() {
		disableFeeFloorCheck = false
	}()

	for _, test := range testCases {
		test := test

		t.Run(test.name, func(t *testing.T) {
			testVectors(t, test)
		})
	}
}

// addTestHtlcs adds the test vector htlcs to the update logs of the local and
// remote node.
func addTestHtlcs(t *testing.T, remote,
	local *LightningChannel) map[[20]byte]lntypes.Preimage {

	hash160map := make(map[[20]byte]lntypes.Preimage)
	for _, htlc := range testHtlcs {
		preimage, err := lntypes.MakePreimageFromStr(htlc.preimage)
		require.NoError(t, err)

		hash := preimage.Hash()

		// Store ripemd160 hash of the payment hash to later identify
		// resolutions.
		var hash160 [20]byte
		copy(hash160[:], input.Ripemd160H(hash[:]))
		hash160map[hash160] = preimage

		// Add htlc to the channel.
		chanID := lnwire.NewChanIDFromOutPoint(remote.ChanPoint)

		msg := &lnwire.UpdateAddHTLC{
			Amount:      htlc.amount,
			ChanID:      chanID,
			Expiry:      htlc.expiry,
			PaymentHash: hash,
		}
		if htlc.incoming {
			htlcID, err := remote.AddHTLC(msg, nil)
			require.NoError(t, err, "unable to add htlc")

			msg.ID = htlcID
			_, err = local.ReceiveHTLC(msg)
			require.NoError(t, err, "unable to recv htlc")
		} else {
			htlcID, err := local.AddHTLC(msg, nil)
			require.NoError(t, err, "unable to add htlc")

			msg.ID = htlcID
			_, err = remote.ReceiveHTLC(msg)
			require.NoError(t, err, "unable to recv htlc")
		}
	}

	return hash160map
}

// testVectors executes a commit dance to end up with the commitment transaction
// that is described in the test vectors and then asserts that all values are
// correct.
func testVectors(t *testing.T, test testCase) {
	tc := newTestContext(t)

	// Balances in the test vectors are before subtraction of in-flight
	// htlcs. Convert to spendable balances.
	remoteBalance := test.commitment.RemoteBalance
	localBalance := test.commitment.LocalBalance

	if test.htlcDescs != nil {
		for _, htlc := range testHtlcs {
			if htlc.incoming {
				remoteBalance += htlc.amount
			} else {
				localBalance += htlc.amount
			}
		}
	}

	// This should actually be tweakless. Update once
	// https://github.com/lightningnetwork/lightning-rfc/pull/758 is merged.
	chanType := channeldb.SingleFunderBit

	// Set up a test channel on which the test commitment transaction is
	// going to be produced.
	remoteChannel, localChannel, cleanUp := createTestChannelsForVectors(
		tc,
		chanType, test.commitment.FeePerKB,
		remoteBalance.ToAtoms(),
		localBalance.ToAtoms(),
	)
	defer cleanUp()

	// Add htlcs (if any) to the update logs of both sides and save a hash
	// map that allows us to identify the htlcs in the scripts later on and
	// retrieve the corresponding preimage.
	var hash160map map[[20]byte]lntypes.Preimage
	if test.htlcDescs != nil {
		hash160map = addTestHtlcs(t, remoteChannel, localChannel)
	}

	// Execute commit dance to arrive at the point where the local node has
	// received the test commitment and the remote signature.
	localSig, localHtlcSigs, _, err := localChannel.SignNextCommitment()
	require.NoError(t, err, "local unable to sign commitment")

	err = remoteChannel.ReceiveNewCommitment(localSig, localHtlcSigs)
	require.NoError(t, err)

	revMsg, _, err := remoteChannel.RevokeCurrentCommitment()
	require.NoError(t, err)

	_, _, _, _, err = localChannel.ReceiveRevocation(revMsg)
	require.NoError(t, err)

	remoteSig, remoteHtlcSigs, _, err := remoteChannel.SignNextCommitment()
	require.NoError(t, err)

	err = localChannel.ReceiveNewCommitment(remoteSig, remoteHtlcSigs)
	require.NoError(t, err)

	_, _, err = localChannel.RevokeCurrentCommitment()
	require.NoError(t, err)

	// Now the local node force closes the channel so that we can inspect
	// its state.
	forceCloseSum, err := localChannel.ForceClose()
	require.NoError(t, err)

	// Uncomment the following line to debug the generated commitment tx.
	// t.Logf("XXXX %d %s\n%s", test.commitment.FeePerKB, test.name, spew.Sdump(forceCloseSum.CloseTx))

	err = checkSignedCommitmentTxSanity(forceCloseSum.CloseTx, tc.fundingTx.MsgTx().TxOut[0], tc.params)
	require.NoError(t, err)

	// Start verifying the signatures match.
	require.Equal(t, test.remoteSigHex, hex.EncodeToString(remoteSig.ToSignatureBytes()),
		"commit tx remote sig incorrect")
	require.Equal(t, len(remoteHtlcSigs), len(test.htlcDescs),
		"wrong number of htlc sigs")
	for i, sig := range remoteHtlcSigs {
		require.Equal(t, test.htlcDescs[i].remoteSigHex, hex.EncodeToString(sig.ToSignatureBytes()),
			"remote HTLC sig %d incorrect", i)
	}

	// Assert that the commitment transaction itself is as expected.
	var txBytes bytes.Buffer
	require.NoError(t, forceCloseSum.CloseTx.Serialize(&txBytes))

	require.Equal(t, test.expectedCommitmentTxHex, hex.EncodeToString(txBytes.Bytes()),
		"commitment tx hex incorrect")

	// Obtain the second level transactions that the local node's channel
	// state machine has produced. Store them in a map indexed by commit tx
	// output index. Also complete the second level transaction with the
	// preimage. This is normally done later in the contract resolver.
	secondLevelTxes := map[uint32]*wire.MsgTx{}
	storeTx := func(index uint32, tx *wire.MsgTx) {
		// Prevent overwrites.
		_, exists := secondLevelTxes[index]
		require.False(t, exists)

		secondLevelTxes[index] = tx
	}

	for _, r := range forceCloseSum.HtlcResolutions.IncomingHTLCs {
		successTx := r.SignedSuccessTx
		witnessStack, err := input.SigScriptToWitnessStack(successTx.TxIn[0].SignatureScript)
		require.NoError(t, err)
		witnessScript := witnessStack[3]
		var hash160 [20]byte
		copy(hash160[:], witnessScript[70:70+20])
		preimage, ok := hash160map[hash160]
		require.True(t, ok, "Could not find preimage for hash %x", hash160)
		witnessStack[2] = preimage[:]
		successTx.TxIn[0].SignatureScript, err = input.WitnessStackToSigScript(witnessStack)
		require.NoError(t, err)
		storeTx(r.HtlcPoint().Index, successTx)
	}
	for _, r := range forceCloseSum.HtlcResolutions.OutgoingHTLCs {
		storeTx(r.HtlcPoint().Index, r.SignedTimeoutTx)
	}

	// Create a list of second level transactions ordered by commit tx
	// output index.
	var keys []uint32
	for k := range secondLevelTxes {
		keys = append(keys, k)
	}
	sort.Slice(keys, func(a, b int) bool {
		return keys[a] < keys[b]
	})

	// Assert that this list matches the test vectors.
	failed := false
	for i, idx := range keys {
		tx := secondLevelTxes[idx]
		var b bytes.Buffer
		err := tx.Serialize(&b)
		require.NoError(t, err)

		err = checkSignedCommitmentSpendingTxSanity(tx, forceCloseSum.CloseTx,
			tc.params)
		require.NoError(t, err)

		require.Equal(
			t,
			test.htlcDescs[i].resolutionTxHex,
			hex.EncodeToString(b.Bytes()),
			"second level tx %d incorrect", i,
		)
	}
	if failed {
		t.Fatalf("failed")
	}
}

func TestCommitTxStateHint(t *testing.T) {
	t.Parallel()

	stateHintTests := []struct {
		name       string
		from       uint64
		to         uint64
		inputs     int
		shouldFail bool
	}{
		{
			name:       "states 0 to 1000",
			from:       0,
			to:         1000,
			inputs:     1,
			shouldFail: false,
		},
		{
			name:       "states 'maxStateHint-1000' to 'maxStateHint'",
			from:       maxStateHint - 1000,
			to:         maxStateHint,
			inputs:     1,
			shouldFail: false,
		},
		{
			name:       "state 'maxStateHint+1'",
			from:       maxStateHint + 1,
			to:         maxStateHint + 10,
			inputs:     1,
			shouldFail: true,
		},
		{
			name:       "commit transaction with two inputs",
			inputs:     2,
			shouldFail: true,
		},
	}

	var obfuscator [StateHintSize]byte
	copy(obfuscator[:], testHdSeed[:StateHintSize])
	timeYesterday := uint32(time.Now().Unix() - 24*60*60)

	for _, test := range stateHintTests {
		commitTx := wire.NewMsgTx()
		commitTx.Version = input.LNTxVersion

		// Add supplied number of inputs to the commitment transaction.
		for i := 0; i < test.inputs; i++ {
			commitTx.AddTxIn(&wire.TxIn{})
		}

		for i := test.from; i <= test.to; i++ {
			stateNum := i

			err := SetStateNumHint(commitTx, stateNum, obfuscator)
			if err != nil && !test.shouldFail {
				t.Fatalf("unable to set state num %v: %v", i, err)
			} else if err == nil && test.shouldFail {
				t.Fatalf("Failed(%v): test should fail but did not", test.name)
			}

			locktime := commitTx.LockTime
			sequence := commitTx.TxIn[0].Sequence

			// Locktime should not be less than 500,000,000 and not larger
			// than the time 24 hours ago. One day should provide a good
			// enough buffer for the tests.
			if locktime < 5e8 || locktime > timeYesterday {
				if !test.shouldFail {
					t.Fatalf("The value of locktime (%v) may cause the commitment "+
						"transaction to be unspendable", locktime)
				}
			}

			if sequence&wire.SequenceLockTimeDisabled == 0 {
				if !test.shouldFail {
					t.Fatalf("Sequence locktime is NOT disabled when it should be")
				}
			}

			extractedStateNum := GetStateNumHint(commitTx, obfuscator)
			if extractedStateNum != stateNum && !test.shouldFail {
				t.Fatalf("state number mismatched, expected %v, got %v",
					stateNum, extractedStateNum)
			} else if extractedStateNum == stateNum && test.shouldFail {
				t.Fatalf("Failed(%v): test should fail but did not", test.name)
			}
		}
		t.Logf("Passed: %v", test.name)
	}
}

// testSpendValidation ensures that we're able to spend all outputs in the
// commitment transaction that we create.
func testSpendValidation(t *testing.T, tweakless bool) {
	// We generate a fake output, and the corresponding txin. This output
	// doesn't need to exist, as we'll only be validating spending from the
	// transaction that references this.
	txid, err := chainhash.NewHash(testHdSeed.CloneBytes())
	if err != nil {
		t.Fatalf("unable to create txid: %v", err)
	}
	fundingOut := &wire.OutPoint{
		Hash:  *txid,
		Index: 50,
		Tree:  wire.TxTreeRegular,
	}

	const channelBalance = dcrutil.Amount(1 * 10e8)
	const csvTimeout = 5
	fakeFundingTxIn := wire.NewTxIn(fundingOut, int64(channelBalance), nil)

	// We also set up set some resources for the commitment transaction.
	// Each side currently has 1 DCR within the channel, with a total
	// channel capacity of 2 DCR.
	aliceKeyPriv, aliceKeyPub := privKeyFromBytes(testWalletPrivKey)
	bobKeyPriv, bobKeyPub := privKeyFromBytes(bobsPrivKey)

	revocationPreimage := testHdSeed.CloneBytes()
	commitSecret, commitPoint := privKeyFromBytes(revocationPreimage)
	revokePubKey := input.DeriveRevocationPubkey(bobKeyPub, commitPoint)

	aliceDelayKey := input.TweakPubKey(aliceKeyPub, commitPoint)

	// Bob will have the channel "force closed" on him, so for the sake of
	// our commitments, if it's tweakless, his key will just be his regular
	// pubkey.
	bobPayKey := input.TweakPubKey(bobKeyPub, commitPoint)
	channelType := channeldb.SingleFunderBit
	if tweakless {
		bobPayKey = bobKeyPub
		channelType = channeldb.SingleFunderTweaklessBit
	}

	remoteCommitTweak := input.SingleTweakBytes(commitPoint, aliceKeyPub)
	localCommitTweak := input.SingleTweakBytes(commitPoint, bobKeyPub)

	aliceSelfOutputSigner := &input.MockSigner{
		Privkeys: []*secp256k1.PrivateKey{aliceKeyPriv},
	}

	aliceChanCfg := &channeldb.ChannelConfig{
		ChannelConstraints: channeldb.ChannelConstraints{
			DustLimit: DefaultDustLimit(),
			CsvDelay:  csvTimeout,
		},
	}

	bobChanCfg := &channeldb.ChannelConfig{
		ChannelConstraints: channeldb.ChannelConstraints{
			DustLimit: DefaultDustLimit(),
			CsvDelay:  csvTimeout,
		},
	}

	// With all the test data set up, we create the commitment transaction.
	// We only focus on a single party's transactions, as the scripts are
	// identical with the roles reversed.
	//
	// This is Alice's commitment transaction, so she must wait a CSV delay
	// of 5 blocks before sweeping the output, while bob can spend
	// immediately with either the revocation key, or his regular key.
	keyRing := &CommitmentKeyRing{
		ToLocalKey:    aliceDelayKey,
		RevocationKey: revokePubKey,
		ToRemoteKey:   bobPayKey,
	}
	commitmentTx, err := CreateCommitTx(
		channelType, *fakeFundingTxIn, keyRing, aliceChanCfg,
		bobChanCfg, channelBalance, channelBalance, 0,
	)
	if err != nil {
		t.Fatalf("unable to create commitment transaction: %v", nil)
	}

	delayOutput := commitmentTx.TxOut[0]
	regularOutput := commitmentTx.TxOut[1]

	// We're testing an uncooperative close, output sweep, so construct a
	// transaction which sweeps the funds to a random address.
	targetOutput, err := input.CommitScriptUnencumbered(aliceKeyPub)
	if err != nil {
		t.Fatalf("unable to create target output: %v", err)
	}
	sweepTx := wire.NewMsgTx()
	sweepTx.Version = input.LNTxVersion
	sweepTx.AddTxIn(wire.NewTxIn(&wire.OutPoint{
		Hash:  commitmentTx.TxHash(),
		Index: 0,
	}, delayOutput.Value, nil))
	sweepTx.AddTxOut(&wire.TxOut{
		PkScript: targetOutput,
		Value:    0.5 * 10e8,
	})

	// First, we'll test spending with Alice's key after the timeout.
	delayScript, err := input.CommitScriptToSelf(
		csvTimeout, aliceDelayKey, revokePubKey,
	)
	if err != nil {
		t.Fatalf("unable to generate alice delay script: %v", err)
	}
	sweepTx.TxIn[0].Sequence = input.LockTimeToSequence(false, csvTimeout)
	signDesc := &input.SignDescriptor{
		WitnessScript: delayScript,
		KeyDesc: keychain.KeyDescriptor{
			PubKey: aliceKeyPub,
		},
		SingleTweak: remoteCommitTweak,
		Output: &wire.TxOut{
			Value: int64(channelBalance),
		},
		HashType:   txscript.SigHashAll,
		InputIndex: 0,
	}
	aliceWitnessSpend, err := input.CommitSpendTimeout(
		aliceSelfOutputSigner, signDesc, sweepTx,
	)
	if err != nil {
		t.Fatalf("unable to generate delay commit spend witness: %v", err)
	}
	sweepTx.TxIn[0].SignatureScript, err = input.WitnessStackToSigScript(aliceWitnessSpend)
	if err != nil {
		t.Fatalf("unable to convert witness stack to sigScript: %v", err)
	}

	vm, err := txscript.NewEngine(delayOutput.PkScript,
		sweepTx, 0, input.ScriptVerifyFlags, delayOutput.Version, nil)
	if err != nil {
		t.Fatalf("unable to create engine: %v", err)
	}
	if err := vm.Execute(); err != nil {
		t.Fatalf("spend from delay output is invalid: %v", err)
	}

	localSigner := &input.MockSigner{Privkeys: []*secp256k1.PrivateKey{bobKeyPriv}}

	// Next, we'll test bob spending with the derived revocation key to
	// simulate the scenario when Alice broadcasts this commitment
	// transaction after it's been revoked.
	signDesc = &input.SignDescriptor{
		KeyDesc: keychain.KeyDescriptor{
			PubKey: bobKeyPub,
		},
		DoubleTweak:   commitSecret,
		WitnessScript: delayScript,
		Output: &wire.TxOut{
			Value: int64(channelBalance),
		},
		HashType:   txscript.SigHashAll,
		InputIndex: 0,
	}
	bobWitnessSpend, err := input.CommitSpendRevoke(localSigner, signDesc,
		sweepTx)
	if err != nil {
		t.Fatalf("unable to generate revocation witness: %v", err)
	}
	sweepTx.TxIn[0].SignatureScript, err = input.WitnessStackToSigScript(bobWitnessSpend)
	if err != nil {
		t.Fatalf("unable to convert witness stack to sigScript: %v", err)
	}

	vm, err = txscript.NewEngine(delayOutput.PkScript,
		sweepTx, 0, input.ScriptVerifyFlags, delayOutput.Version, nil)
	if err != nil {
		t.Fatalf("unable to create engine: %v", err)
	}
	if err := vm.Execute(); err != nil {
		t.Fatalf("revocation spend is invalid: %v", err)
	}

	// In order to test the final scenario, we modify the TxIn of the sweep
	// transaction to instead point to the regular output (non delay)
	// within the commitment transaction.
	sweepTx.TxIn[0] = &wire.TxIn{
		PreviousOutPoint: wire.OutPoint{
			Hash:  commitmentTx.TxHash(),
			Index: 1,
		},
	}

	// Finally, we test bob sweeping his output as normal in the case that
	// Alice broadcasts this commitment transaction.
	bobScriptP2PKH, err := input.CommitScriptUnencumbered(bobPayKey)
	if err != nil {
		t.Fatalf("unable to create bob p2wkh script: %v", err)
	}
	signDesc = &input.SignDescriptor{
		KeyDesc: keychain.KeyDescriptor{
			PubKey: bobKeyPub,
		},
		WitnessScript: bobScriptP2PKH,
		Output: &wire.TxOut{
			Value:    int64(channelBalance),
			PkScript: bobScriptP2PKH,
		},
		HashType:   txscript.SigHashAll,
		InputIndex: 0,
	}
	if !tweakless {
		signDesc.SingleTweak = localCommitTweak
	}
	bobRegularSpend, err := input.CommitSpendNoDelay(
		localSigner, signDesc, sweepTx, tweakless,
	)
	if err != nil {
		t.Fatalf("unable to create bob regular spend: %v", err)
	}
	sweepTx.TxIn[0].SignatureScript, err = input.WitnessStackToSigScript(bobRegularSpend)
	if err != nil {
		t.Fatalf("unable to convert witness stack to sigScript: %v", err)
	}

	vm, err = txscript.NewEngine(regularOutput.PkScript,
		sweepTx, 0, input.ScriptVerifyFlags, regularOutput.Version, nil)
	if err != nil {
		t.Fatalf("unable to create engine: %v", err)
	}
	if err := vm.Execute(); err != nil {
		t.Fatalf("bob p2wkh spend is invalid: %v", err)
	}
}

// TestCommitmentSpendValidation test the spendability of both outputs within
// the commitment transaction.
//
// The following spending cases are covered by this test:
//   * Alice's spend from the delayed output on her commitment transaction.
//   * Bob's spend from Alice's delayed output when she broadcasts a revoked
//     commitment transaction.
//   * Bob's spend from his unencumbered output within Alice's commitment
//     transaction.
func TestCommitmentSpendValidation(t *testing.T) {
	t.Parallel()

	// In the modern network, all channels use the new tweakless format,
	// but we also need to support older nodes that want to open channels
	// with the legacy format, so we'll test spending in both scenarios.
	for _, tweakless := range []bool{true, false} {
		tweakless := tweakless
		t.Run(fmt.Sprintf("tweak=%v", tweakless), func(t *testing.T) {
			testSpendValidation(t, tweakless)
		})
	}
}

type mockProducer struct {
	secret shachain.ShaHash
}

func (p *mockProducer) AtIndex(uint64) (*shachain.ShaHash, error) {
	return &p.secret, nil
}

func (p *mockProducer) Encode(w io.Writer) error {
	_, err := w.Write(p.secret[:])
	return err
}

// createTestChannelsForVectors creates two LightningChannel instances for the
// test channel that is used to verify the test vectors.
func createTestChannelsForVectors(tc *testContext, chanType channeldb.ChannelType,
	feeRate dcrutil.Amount, remoteBalance, localBalance dcrutil.Amount) (
	*LightningChannel, *LightningChannel, func()) {

	t := tc.t

	prevOut := &wire.OutPoint{
		Hash:  *tc.fundingTx.Hash(),
		Index: 0,
	}

	fundingTxIn := wire.NewTxIn(prevOut, 0, nil)

	// Generate random some keys that don't actually matter but need to be
	// set.
	var (
		remoteDummy1, remoteDummy2 *secp256k1.PrivateKey
		localDummy2, localDummy1   *secp256k1.PrivateKey
	)
	generateKeys := []**secp256k1.PrivateKey{
		&remoteDummy1, &remoteDummy2, &localDummy1, &localDummy2,
	}
	for _, keyRef := range generateKeys {
		privkey, err := secp256k1.GeneratePrivateKey()
		require.NoError(t, err)
		*keyRef = privkey
	}

	// Define channel configurations.
	remoteCfg := channeldb.ChannelConfig{
		ChannelConstraints: channeldb.ChannelConstraints{
			DustLimit: tc.dustLimit,
			MaxPendingAmount: lnwire.NewMAtomsFromAtoms(
				tc.fundingAmount,
			),
			ChanReserve:      0,
			MinHTLC:          0,
			MaxAcceptedHtlcs: input.MaxHTLCNumber / 2,
			CsvDelay:         tc.localCsvDelay,
		},
		MultiSigKey: keychain.KeyDescriptor{
			PubKey: tc.remoteFundingPrivkey.PubKey(),
		},
		PaymentBasePoint: keychain.KeyDescriptor{
			PubKey: tc.remotePaymentBasepointSecret.PubKey(),
		},
		HtlcBasePoint: keychain.KeyDescriptor{
			PubKey: tc.remotePaymentBasepointSecret.PubKey(),
		},
		DelayBasePoint: keychain.KeyDescriptor{
			PubKey: remoteDummy1.PubKey(),
		},
		RevocationBasePoint: keychain.KeyDescriptor{
			PubKey: tc.remoteRevocationBasepointSecret.PubKey(),
		},
	}
	localCfg := channeldb.ChannelConfig{
		ChannelConstraints: channeldb.ChannelConstraints{
			DustLimit: tc.dustLimit,
			MaxPendingAmount: lnwire.NewMAtomsFromAtoms(
				tc.fundingAmount,
			),
			ChanReserve:      0,
			MinHTLC:          0,
			MaxAcceptedHtlcs: input.MaxHTLCNumber / 2,
			CsvDelay:         tc.localCsvDelay,
		},
		MultiSigKey: keychain.KeyDescriptor{
			PubKey: tc.localFundingPrivkey.PubKey(),
		},
		PaymentBasePoint: keychain.KeyDescriptor{
			PubKey: tc.localPaymentBasepointSecret.PubKey(),
		},
		HtlcBasePoint: keychain.KeyDescriptor{
			PubKey: tc.localPaymentBasepointSecret.PubKey(),
		},
		DelayBasePoint: keychain.KeyDescriptor{
			PubKey: tc.localDelayedPaymentBasepointSecret.PubKey(),
		},
		RevocationBasePoint: keychain.KeyDescriptor{
			PubKey: localDummy1.PubKey(),
		},
	}

	// Create mock producers to force usage of the test vector commitment
	// point.
	remotePreimageProducer := &mockProducer{
		secret: shachain.ShaHash(tc.localPerCommitSecret),
	}
	remoteCommitPoint := input.ComputeCommitmentPoint(
		tc.localPerCommitSecret[:],
	)

	localPreimageProducer := &mockProducer{
		secret: shachain.ShaHash(tc.localPerCommitSecret),
	}
	localCommitPoint := input.ComputeCommitmentPoint(
		tc.localPerCommitSecret[:],
	)

	// Create temporary databases.
	remotePath, err := ioutil.TempDir("", "remotedb")
	require.NoError(t, err)

	dbRemote, err := channeldb.Open(remotePath)
	require.NoError(t, err)

	localPath, err := ioutil.TempDir("", "localdb")
	require.NoError(t, err)

	dbLocal, err := channeldb.Open(localPath)
	require.NoError(t, err)

	// Create the initial commitment transactions for the channel.
	feePerKB := chainfee.AtomPerKByte(feeRate)
	commitSize := input.CommitmentTxSize
	if chanType.HasAnchors() {
		commitSize = input.CommitmentWithAnchorsTxSize
	}
	commitFee := feePerKB.FeeForSize(commitSize)

	remoteCommitTx, localCommitTx, err := CreateCommitmentTxns(
		remoteBalance, localBalance-commitFee,
		&remoteCfg, &localCfg, remoteCommitPoint,
		localCommitPoint, *fundingTxIn, chanType,
		tc.params,
	)
	require.NoError(t, err)

	// Set up the full channel state.

	// Subtract one because extra sig exchange will take place during setup
	// to get to the right test point.
	var commitHeight = tc.commitHeight - 1

	remoteCommit := channeldb.ChannelCommitment{
		CommitHeight:  commitHeight,
		LocalBalance:  lnwire.NewMAtomsFromAtoms(remoteBalance),
		RemoteBalance: lnwire.NewMAtomsFromAtoms(localBalance - commitFee),
		CommitFee:     commitFee,
		FeePerKB:      dcrutil.Amount(feePerKB),
		CommitTx:      remoteCommitTx,
		CommitSig:     testSigBytes,
	}
	localCommit := channeldb.ChannelCommitment{
		CommitHeight:  commitHeight,
		LocalBalance:  lnwire.NewMAtomsFromAtoms(localBalance - commitFee),
		RemoteBalance: lnwire.NewMAtomsFromAtoms(remoteBalance),
		CommitFee:     commitFee,
		FeePerKB:      dcrutil.Amount(feePerKB),
		CommitTx:      localCommitTx,
		CommitSig:     testSigBytes,
	}

	var chanIDBytes [8]byte
	_, err = io.ReadFull(rand.Reader, chanIDBytes[:])
	require.NoError(t, err)

	shortChanID := lnwire.NewShortChanIDFromInt(
		binary.BigEndian.Uint64(chanIDBytes[:]),
	)

	remoteChannelState := &channeldb.OpenChannel{
		LocalChanCfg:            remoteCfg,
		RemoteChanCfg:           localCfg,
		IdentityPub:             remoteDummy2.PubKey(),
		FundingOutpoint:         *prevOut,
		ShortChannelID:          shortChanID,
		ChanType:                chanType,
		IsInitiator:             false,
		Capacity:                tc.fundingAmount,
		RemoteCurrentRevocation: localCommitPoint,
		RevocationProducer:      remotePreimageProducer,
		RevocationStore:         shachain.NewRevocationStore(),
		LocalCommitment:         remoteCommit,
		RemoteCommitment:        remoteCommit,
		Db:                      dbRemote,
		Packager:                channeldb.NewChannelPackager(shortChanID),
		FundingTxn:              tc.fundingTx.MsgTx(),
	}
	localChannelState := &channeldb.OpenChannel{
		LocalChanCfg:            localCfg,
		RemoteChanCfg:           remoteCfg,
		IdentityPub:             localDummy2.PubKey(),
		FundingOutpoint:         *prevOut,
		ShortChannelID:          shortChanID,
		ChanType:                chanType,
		IsInitiator:             true,
		Capacity:                tc.fundingAmount,
		RemoteCurrentRevocation: remoteCommitPoint,
		RevocationProducer:      localPreimageProducer,
		RevocationStore:         shachain.NewRevocationStore(),
		LocalCommitment:         localCommit,
		RemoteCommitment:        localCommit,
		Db:                      dbLocal,
		Packager:                channeldb.NewChannelPackager(shortChanID),
		FundingTxn:              tc.fundingTx.MsgTx(),
	}

	// Create mock signers that can sign for the keys that are used.
	localSigner := &input.MockSigner{Privkeys: []*secp256k1.PrivateKey{
		tc.localPaymentBasepointSecret, tc.localDelayedPaymentBasepointSecret,
		tc.localFundingPrivkey, localDummy1, localDummy2,
	}}

	remoteSigner := &input.MockSigner{Privkeys: []*secp256k1.PrivateKey{
		tc.remoteFundingPrivkey, tc.remoteRevocationBasepointSecret,
		tc.remotePaymentBasepointSecret, remoteDummy1, remoteDummy2,
	}}

	remotePool := NewSigPool(1, remoteSigner)
	channelRemote, err := NewLightningChannel(
		remoteSigner, remoteChannelState, remotePool, tc.params,
	)
	require.NoError(t, err)
	require.NoError(t, remotePool.Start())

	localPool := NewSigPool(1, localSigner)
	channelLocal, err := NewLightningChannel(
		localSigner, localChannelState, localPool, tc.params,
	)
	require.NoError(t, err)
	require.NoError(t, localPool.Start())

	// Create state hunt obfuscator for the commitment transaction.
	obfuscator := createStateHintObfuscator(remoteChannelState)
	err = SetStateNumHint(
		remoteCommitTx, commitHeight, obfuscator,
	)
	require.NoError(t, err)

	err = SetStateNumHint(
		localCommitTx, commitHeight, obfuscator,
	)
	require.NoError(t, err)

	// Initialize the database.
	addr := &net.TCPAddr{
		IP:   net.ParseIP("127.0.0.1"),
		Port: 18556,
	}
	require.NoError(t, channelRemote.channelState.SyncPending(addr, 101))

	addr = &net.TCPAddr{
		IP:   net.ParseIP("127.0.0.1"),
		Port: 18555,
	}
	require.NoError(t, channelLocal.channelState.SyncPending(addr, 101))

	// Now that the channel are open, simulate the start of a session by
	// having local and remote extend their revocation windows to each other.
	err = initRevocationWindows(channelRemote, channelLocal)
	require.NoError(t, err)

	// Return a clean up function that stops goroutines and removes the test
	// databases.
	cleanUpFunc := func() {
		os.RemoveAll(localPath)
		os.RemoveAll(remotePath)

		require.NoError(t, remotePool.Stop())
		require.NoError(t, localPool.Stop())
	}

	return channelRemote, channelLocal, cleanUpFunc
}

// checkLnTransactionSanity checks whether an ln transaction (funding,
// commitment, etc) is reasonably sane according to consensus and standardness
// checks that don't require a full backing blockchain to verify.
func checkLnTransactionSanity(tx *wire.MsgTx, utxos map[wire.OutPoint]*wire.TxOut, netParams *chaincfg.Params) error {
	err := blockchain.CheckTransactionSanity(tx, netParams)
	if err != nil {
		return fmt.Errorf("error checking tx sanity: %v", err)
	}

	var inputSum int64
	var outputSum int64

	txType := stake.DetermineTxType(tx)
	if txType != stake.TxTypeRegular {
		return fmt.Errorf("transaction is not of the regular type")
	}
	if tx.Expiry != wire.NoExpiryValue {
		return fmt.Errorf("expiry for the tx is not %d", wire.NoExpiryValue)
	}
	if tx.Version != input.LNTxVersion {
		return fmt.Errorf("tx version (%d) different than expected (%d)",
			tx.Version, input.LNTxVersion)
	}
	for i, out := range tx.TxOut {
		if out.Version != scriptVersion {
			return fmt.Errorf("output %d of tx does not use the "+
				"default script version (found %d)", i, out.Version)
		}

		outputSum += out.Value
	}
	for i, in := range tx.TxIn {
		utxo, hasUtxo := utxos[in.PreviousOutPoint]
		if !hasUtxo {
			return fmt.Errorf("utxo for input %d (%s) of tx not provided", i,
				in.PreviousOutPoint)
		}

		engine, err := txscript.NewEngine(utxo.PkScript, tx, i,
			input.ScriptVerifyFlags, utxo.Version, nil)
		if err != nil {
			return fmt.Errorf("error creating engine to process input %d: %v",
				i, err)
		}

		err = engine.Execute()
		if err != nil {
			return fmt.Errorf("error executing script of input %d: %v", i, err)
		}

		inputSum += utxo.Value
	}

	if (outputSum > inputSum) || (outputSum < 0) {
		return fmt.Errorf("sum of output amounts > sum of input amounts")
	}

	return nil
}

// checkSignedCommitmentTxSanity checks whether a commitment transaction is
// reasonably sane according to consensus and standardness checks that don't
// require a full backing blockchain to verify.
//
// It assumes the commit transaction input previous outpoint is correctly
// pointing to the passed fundingTxOut.
func checkSignedCommitmentTxSanity(commitTx *wire.MsgTx, fundingTxOut *wire.TxOut, netParams *chaincfg.Params) error {

	if len(commitTx.TxIn) != 1 {
		return fmt.Errorf("commit transaction has invalid number of inputs")
	}

	utxos := make(map[wire.OutPoint]*wire.TxOut, 1)
	utxos[commitTx.TxIn[0].PreviousOutPoint] = fundingTxOut

	return checkLnTransactionSanity(commitTx, utxos, netParams)
}

// checkSignedCommitmentSpendingTxSanity checks whether a transaction spending
// from a commitment transaction (eg: an htlc resolution transaction or a breach
// remedy transaction ) is reasonably sane according to consensus and
// standardness checks that don't require a full backing blockchain to verify.
//
// This assumes the commitment transaction is sane (ie
// checkSignedCommitmentTxSanity returns nil).
func checkSignedCommitmentSpendingTxSanity(spendTx, commitTx *wire.MsgTx, netParams *chaincfg.Params) error {

	commitTxHash := commitTx.TxHash()
	countCommitOuts := uint32(len(commitTx.TxOut))

	utxos := make(map[wire.OutPoint]*wire.TxOut, len(spendTx.TxIn))
	for i, in := range spendTx.TxIn {
		outp := in.PreviousOutPoint
		if (outp.Hash != commitTxHash) || (outp.Index >= countCommitOuts) ||
			(outp.Tree != wire.TxTreeRegular) {

			return fmt.Errorf("input %d of spender tx does not spend from "+
				"commit tx", i)
		}
		utxos[outp] = commitTx.TxOut[outp.Index]
	}

	return checkLnTransactionSanity(spendTx, utxos, netParams)
}
